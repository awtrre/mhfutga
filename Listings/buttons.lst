C51 COMPILER V9.60.7.0   BUTTONS                                                           06/04/2025 23:42:24 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE BUTTONS
OBJECT MODULE PLACED IN .\Objects\buttons.obj
COMPILER INVOKED BY: D:\Program Files\Keli C51\C51\BIN\C51.EXE buttons.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRI
                    -NT(.\Listings\buttons.lst) TABS(2) OBJECT(.\Objects\buttons.obj)

line level    source

   1          #include "buttons.h"
   2          #include "motor.h"
   3          
   4          // Debounce delay in milliseconds
   5          #define DEBOUNCE_MS        50
   6          
   7          // After button release, run extra tail in milliseconds
   8          #define TAIL_DURATION_MS  100
   9          
  10          // Approximate time per step in milliseconds (must match motor.c step timing)
  11          #define STEP_TIME_MS        2
  12          
  13          // Number of tail steps (= TAIL_DURATION_MS / STEP_TIME_MS)
  14          #define TAIL_STEPS       (TAIL_DURATION_MS / STEP_TIME_MS)
  15          
  16          // 8-step half-stepping sequence for a unipolar stepper motor
  17          static const unsigned char StepCode[8] = {
  18              0x01, 0x03, 0x02, 0x06,
  19              0x04, 0x0C, 0x08, 0x09
  20          };
  21          
  22          // Current forward/reverse step indices, preserved between calls
  23          static unsigned char fwd_index = 0;
  24          static unsigned char rev_index = 7;
  25          
  26          /**
  27           * @brief  Software-based delay for approximately ms milliseconds.
  28           * @param  ms Number of milliseconds to delay.
  29           * @note   Blocking; actual timing depends on crystal frequency and compiler optimizations.
  30           */
  31          static void delay_ms_local(unsigned int ms) {
  32   1          unsigned int i, j;
  33   1          for (i = ms; i > 0; i--) {
  34   2              for (j = 110; j > 0; j--);
  35   2          }
  36   1      }
  37          
  38          /**
  39           * @brief  Check if Button 1 (K1 on P3.0) is pressed (active-low).
  40           * @return 1 if pressed, 0 otherwise.
  41           */
  42          static bit is_button1_pressed(void) {
  43   1          return (P3 & 0x01) == 0x00;
  44   1      }
  45          
  46          /**
  47           * @brief  Check if Button 2 (K2 on P3.1) is pressed (active-low).
  48           * @return 1 if pressed, 0 otherwise.
  49           */
  50          static bit is_button2_pressed(void) {
  51   1          return (P3 & 0x02) == 0x00;
  52   1      }
  53          
  54          void Buttons_Init(void) {
C51 COMPILER V9.60.7.0   BUTTONS                                                           06/04/2025 23:42:24 PAGE 2   

  55   1          // Ensure motor port is off at startup
  56   1          MOTOR_PORT = 0x00;
  57   1      }
  58          
  59          void Button1_Handle(void) {
  60   1          unsigned int tail_count;
  61   1      
  62   1          // If K1 is detected as pressed, debounce and confirm
  63   1          if (is_button1_pressed()) {
  64   2              delay_ms_local(DEBOUNCE_MS);
  65   2              if (is_button1_pressed()) {
  66   3                  // While K1 remains pressed, spin forward continuously
  67   3                  while (is_button1_pressed()) {
  68   4                      MOTOR_PORT = StepCode[fwd_index];
  69   4                      fwd_index++;
  70   4                      if (fwd_index >= 8) {
  71   5                          fwd_index = 0;
  72   5                      }
  73   4                      delay_ms_local(STEP_TIME_MS);
  74   4                  }
  75   3                  // After release, run tail steps before stopping
  76   3                  for (tail_count = 0; tail_count < TAIL_STEPS; tail_count++) {
  77   4                      MOTOR_PORT = StepCode[fwd_index];
  78   4                      fwd_index++;
  79   4                      if (fwd_index >= 8) {
  80   5                          fwd_index = 0;
  81   5                      }
  82   4                      delay_ms_local(STEP_TIME_MS);
  83   4                  }
  84   3                  // Turn off coils once tail run completes
  85   3                  MOTOR_PORT = 0x00;
  86   3                  delay_ms_local(DEBOUNCE_MS);
  87   3      
  88   3                  // Optional: synchronize rev_index for seamless reversal
  89   3                  // if (fwd_index == 0) rev_index = 7;
  90   3                  // else rev_index = fwd_index - 1;
  91   3              }
  92   2          }
  93   1      }
  94          
  95          void Button2_Handle(void) {
  96   1          unsigned int tail_count;
  97   1      
  98   1          // If K2 is detected as pressed, debounce and confirm
  99   1          if (is_button2_pressed()) {
 100   2              delay_ms_local(DEBOUNCE_MS);
 101   2              if (is_button2_pressed()) {
 102   3                  // While K2 remains pressed, spin in reverse continuously
 103   3                  while (is_button2_pressed()) {
 104   4                      MOTOR_PORT = StepCode[rev_index];
 105   4                      if (rev_index == 0) {
 106   5                          rev_index = 7;
 107   5                      } else {
 108   5                          rev_index--;
 109   5                      }
 110   4                      delay_ms_local(STEP_TIME_MS);
 111   4                  }
 112   3                  // After release, run tail steps before stopping
 113   3                  for (tail_count = 0; tail_count < TAIL_STEPS; tail_count++) {
 114   4                      MOTOR_PORT = StepCode[rev_index];
 115   4                      if (rev_index == 0) {
 116   5                          rev_index = 7;
C51 COMPILER V9.60.7.0   BUTTONS                                                           06/04/2025 23:42:24 PAGE 3   

 117   5                      } else {
 118   5                          rev_index--;
 119   5                      }
 120   4                      delay_ms_local(STEP_TIME_MS);
 121   4                  }
 122   3                  // Turn off coils once tail run completes
 123   3                  MOTOR_PORT = 0x00;
 124   3                  delay_ms_local(DEBOUNCE_MS);
 125   3      
 126   3                  // Optional: synchronize fwd_index for seamless reversal
 127   3                  // fwd_index = (rev_index >= 7) ? 0 : rev_index + 1;
 128   3              }
 129   2          }
 130   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    242    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     10    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
