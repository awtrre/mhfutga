C51 COMPILER V9.60.7.0   BUTTONS                                                           06/06/2025 00:01:25 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE BUTTONS
OBJECT MODULE PLACED IN .\Objects\buttons.obj
COMPILER INVOKED BY: D:\Program Files\Keli C51\C51\BIN\C51.EXE buttons.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRI
                    -NT(.\Listings\buttons.lst) TABS(2) OBJECT(.\Objects\buttons.obj)

line level    source

   1          // buttons.c
   2          
   3          #include "buttons.h"
   4          #include "motor.h"      /* Provides delay_ms(), StepMotor_RunMs, StepMotor_RunReverseMs, StepMotor_Stop */
   5          #include "eeprom.h"     /* Provides SavePositionToEEPROM */
   6          #include "onekey.h"     /* Provides OneKey_Open, OneKey_Close, OneKey_StopAndSave */
   7          #include <reg52.h>      /* SFR definitions */
   8          
   9          /* Debounce time in ms */
  10          #define DEBOUNCE_MS       50U
  11          
  12          /* Manual rotation slice in ms for Button1 and Button2 */
  13          #define MANUAL_STEP_MS   700U
  14          
  15          /* Internal helpers: active-low checks for buttons on P3 */
  16          static bit is_btn1(void)    { return (P3 & 0x01) == 0; }  /* P3.0 */
  17          static bit is_btn2(void)    { return (P3 & 0x02) == 0; }  /* P3.1 */
  18          static bit is_btn3(void)    { return (P3 & 0x04) == 0; }  /* P3.2 */
  19          static bit is_btn4(void)    { return (P3 & 0x08) == 0; }  /* P3.3 */
  20          
  21          /**
  22           * @brief Configure P3.0..P3.3 as inputs with internal pull-ups.
  23           */
  24          void Buttons_Init(void)
  25          {
  26   1          P3 = 0xFF;  /* Set P3 pins to high (inputs with pull-ups) */
  27   1      }
  28          
  29          /**
  30           * @brief Manual forward button handler (P3.0).
  31           *        While held and not at max, run forward 700ms slices.
  32           */
  33          void Button1_Handle(void)
  34          {
  35   1          unsigned long slice;
  36   1      
  37   1          if (is_btn1()) {
  38   2              delay_ms(DEBOUNCE_MS);
  39   2              if (is_btn1()) {
  40   3                  /* If at or beyond fully open, do nothing */
  41   3                  if (g_position_ms >= TOTAL_TIME_MS) {
  42   4                      StepMotor_Stop();
  43   4                      delay_ms(DEBOUNCE_MS);
  44   4                      while (is_btn1());
  45   4                      return;
  46   4                  }
  47   3                  /* While pressed and not at max, run forward in slices */
  48   3                  while (is_btn1() && g_position_ms < TOTAL_TIME_MS) {
  49   4                      slice = (TOTAL_TIME_MS - g_position_ms >= MANUAL_STEP_MS)
  50   4                                  ? MANUAL_STEP_MS
  51   4                                  : (unsigned long)(TOTAL_TIME_MS - g_position_ms);
  52   4                      StepMotor_RunMs((unsigned int)slice);
  53   4                      g_position_ms += slice;
  54   4                  }
C51 COMPILER V9.60.7.0   BUTTONS                                                           06/06/2025 00:01:25 PAGE 2   

  55   3                  StepMotor_Stop();
  56   3                  SavePositionToEEPROM();
  57   3                  delay_ms(DEBOUNCE_MS);
  58   3              }
  59   2          }
  60   1      }
  61          
  62          /**
  63           * @brief Manual reverse button handler (P3.1).
  64           *        While held and not at zero, run reverse 700ms slices.
  65           */
  66          void Button2_Handle(void)
  67          {
  68   1          unsigned long slice;
  69   1      
  70   1          if (is_btn2()) {
  71   2              delay_ms(DEBOUNCE_MS);
  72   2              if (is_btn2()) {
  73   3                  /* If already at zero, do nothing */
  74   3                  if (g_position_ms == 0) {
  75   4                      StepMotor_Stop();
  76   4                      delay_ms(DEBOUNCE_MS);
  77   4                      while (is_btn2());
  78   4                      return;
  79   4                  }
  80   3                  /* While pressed and not at zero, run reverse in slices */
  81   3                  while (is_btn2() && g_position_ms > 0) {
  82   4                      slice = (g_position_ms >= MANUAL_STEP_MS)
  83   4                                  ? MANUAL_STEP_MS
  84   4                                  : (unsigned long)g_position_ms;
  85   4                      StepMotor_RunReverseMs((unsigned int)slice);
  86   4                      g_position_ms -= slice;
  87   4                  }
  88   3                  StepMotor_Stop();
  89   3                  SavePositionToEEPROM();
  90   3                  delay_ms(DEBOUNCE_MS);
  91   3              }
  92   2          }
  93   1      }
  94          
  95          /**
  96           * @brief One-key OPEN button handler (P3.2).
  97           *        If idle, call OneKey_Open(); if running, call OneKey_StopAndSave().
  98           */
  99          void Button3_Handle(void)
 100          {
 101   1          if (is_btn3()) {
 102   2              delay_ms(DEBOUNCE_MS);
 103   2              if (is_btn3()) {
 104   3                  OneKey_Open();
 105   3                  while (is_btn3());  /* Wait for release */
 106   3              }
 107   2          }
 108   1      }
 109          
 110          /**
 111           * @brief One-key CLOSE button handler (P3.3).
 112           *        If idle, call OneKey_Close(); if running, call OneKey_StopAndSave().
 113           */
 114          void Button4_Handle(void)
 115          {
 116   1          if (is_btn4()) {
C51 COMPILER V9.60.7.0   BUTTONS                                                           06/06/2025 00:01:25 PAGE 3   

 117   2              delay_ms(DEBOUNCE_MS);
 118   2              if (is_btn4()) {
 119   3                  OneKey_Close();
 120   3                  while (is_btn4());  /* Wait for release */
 121   3              }
 122   2          }
 123   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    453    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       8
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
