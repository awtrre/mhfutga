C51 COMPILER V9.60.7.0   HCSR04                                                            06/07/2025 00:25:41 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE HCSR04
OBJECT MODULE PLACED IN .\Objects\hcsr04.obj
COMPILER INVOKED BY: D:\Program Files\Keli C51\C51\BIN\C51.EXE hcsr04.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRIN
                    -T(.\Listings\hcsr04.lst) TABS(2) OBJECT(.\Objects\hcsr04.obj)

line level    source

   1          // hcsr04.c
   2          
   3          #include "hcsr04.h"
   4          #include "onekey.h"      /* For OneKey_Close() and OneKey_IsMoving() */
   5          #include <intrins.h>     /* for _nop_() */
   6          #include <reg52.h>       /* SFR definitions */
   7          #include "buzzer.h"     /* NEW: For Buzzer_Enable()/Buzzer_Disable() */
   8          
   9          extern long g_position_ms;  /* Declare external global from main.c */
  10          
  11          /*
  12           * We will use Timer0 in mode 1 (16-bit) to measure echo pulse width.
  13           * Assume crystal frequency is 12MHz, so 1 timer tick ~1µs.
  14           */
  15          
  16          #define OBSTACLE_THRESHOLD_CM   20    /* Obstacle threshold in cm */
  17          
  18          /* Internal flag: whether we have already triggered a close action */
  19          static bit obstacle_triggered = 0;
  20          
  21          /**
  22           * @brief  Microsecond-level approximate delay.
  23           *         Calibrated for 12MHz crystal and Keil C51 optimization level 2.
  24           *
  25           * @param us  Number of microseconds to delay.
  26           */
  27          static void delay_us(unsigned int us)
  28          {
  29   1          unsigned int i;
  30   1          /* Approximately 1µs per loop iteration at 12MHz, OPTIMIZE=2 */
  31   1          for (i = 0; i < us; i++)
  32   1          {
  33   2              _nop_();
  34   2              _nop_();
  35   2          }
  36   1      }
  37          
  38          /**
  39           * @brief  Initialize TRIG as output low; ECHO as input with pull-up.
  40           */
  41          void HCSR04_Init(void)
  42          {
  43   1          HCSR04_TRIG = 0;      /* Ensure TRIG is low */
  44   1          P2 |= 0x02;           /* Pull-up P2.1 (ECHO) if needed */
  45   1      }
  46          
  47          /**
  48           * @brief  Trigger an ultrasonic burst and measure echo pulse width.
  49           * @return Distance in cm, or 0xFFFF if timeout/no echo.
  50           */
  51          unsigned int HCSR04_GetDistanceCm(void)
  52          {
  53   1          unsigned int count;
  54   1          unsigned int dist_cm;
C51 COMPILER V9.60.7.0   HCSR04                                                            06/07/2025 00:25:41 PAGE 2   

  55   1          unsigned int timeout;
  56   1      
  57   1          /* 1) Send 10µs TRIG pulse */
  58   1          HCSR04_TRIG = 0;
  59   1          delay_us(2);
  60   1          HCSR04_TRIG = 1;
  61   1          delay_us(10);
  62   1          HCSR04_TRIG = 0;
  63   1      
  64   1          /* 2) Wait for ECHO to go high (start). Timeout ~30ms */
  65   1          timeout = 30000;
  66   1          while (!HCSR04_ECHO)
  67   1          {
  68   2              if (--timeout == 0)
  69   2              {
  70   3                  return 0xFFFF;  /* Timeout: no echo detected */
  71   3              }
  72   2          }
  73   1      
  74   1          /* 3) Start Timer0 (mode1) to count µs */
  75   1          TMOD &= 0xF0;
  76   1          TMOD |= 0x01;   /* Timer0 in mode 1 (16-bit) */
  77   1          TH0 = 0;
  78   1          TL0 = 0;
  79   1          TR0 = 1;
  80   1      
  81   1          /* 4) Wait for ECHO to go low or timeout ~30ms */
  82   1          timeout = 30000;
  83   1          while (HCSR04_ECHO)
  84   1          {
  85   2              if (--timeout == 0)
  86   2              {
  87   3                  TR0 = 0;  /* Stop timer */
  88   3                  return 0xFFFF;
  89   3              }
  90   2          }
  91   1      
  92   1          /* 5) Stop Timer0, read count */
  93   1          TR0 = 0;
  94   1          count = (TH0 << 8) | TL0; /* Timer value in ticks (~1µs/tick) */
  95   1      
  96   1          /* 6) Convert to cm: sound speed round-trip ~58µs per cm */
  97   1          dist_cm = count / 58;
  98   1          return dist_cm;
  99   1      }
 100          
 101          /**
 102           * @brief  Periodic task with debouncing & down-sample:
 103           *         – Measure distance only once every 100 ms (skip 9 calls).
 104           *         – If motor is MOVING, skip and reset flags.
 105           *         – If IDLE and distance = threshold for 3 consecutive readings, trigger OneKey_Close() once.
 106           *         – If distance > threshold for 3 consecutive readings, reset trigger flag.
 107           *
 108           *         Call this every cycle (e.g., ~10ms in main loop).
 109           */
 110          void HCSR04_Task(void)
 111          {
 112   1          static unsigned char skip_cnt  = 0;  /* Counter to implement 100ms down-sampling (0..9) */
 113   1          static unsigned char hit_cnt   = 0;  /* Consecutive readings = threshold */
 114   1          static unsigned char miss_cnt  = 0;  /* Consecutive readings > threshold or timeout */
 115   1          unsigned int distance;
 116   1          /* ==== 0. If motor already at max position, stop sensor task immediately ==== */
C51 COMPILER V9.60.7.0   HCSR04                                                            06/07/2025 00:25:41 PAGE 3   

 117   1          if (g_position_ms >= TOTAL_TIME_MS)
 118   1          {
 119   2              HCSR04_TRIG = 0;      /* Ensure TRIG stays low so sensor is disabled */
 120   2              obstacle_triggered = 0;/* Reset trigger flag so that after?????????? */
 121   2              return;
 122   2          }
 123   1      
 124   1          /* ---- 1. Down-sample: only measure every 10th call (~100ms) ---- */
 125   1          if (++skip_cnt < 10)
 126   1          {
 127   2              return;  /* Skip this sampling round */
 128   2          }
 129   1          skip_cnt = 0;  /* Reset counter every 100ms */
 130   1      
 131   1          /* ---- 2. If motor is moving, skip measurement and reset flags ---- */
 132   1          if (OneKey_IsMoving())
 133   1          {
 134   2              hit_cnt  = 0;
 135   2              miss_cnt = 0;
 136   2              obstacle_triggered = 0;
 137   2              return;
 138   2          }
 139   1      
 140   1          /* ---- 3. Perform one distance measurement ---- */
 141   1          distance = HCSR04_GetDistanceCm();
 142   1      
 143   1          /* ---- 4. Update hit/miss counters ---- */
 144   1          if (distance != 0xFFFF && distance <= OBSTACLE_THRESHOLD_CM)
 145   1          {
 146   2              /* Detected valid reading within threshold */
 147   2              if (hit_cnt < 3) hit_cnt++;
 148   2              miss_cnt = 0;
 149   2          }
 150   1          else
 151   1          {
 152   2              /* No obstacle or timeout */
 153   2              if (miss_cnt < 3) miss_cnt++;
 154   2              hit_cnt = 0;
 155   2          }
 156   1      
 157   1          /* ---- 5. Decision: trigger on 3 consecutive hits; reset on 3 consecutive misses ---- */
 158   1          if (hit_cnt >= 3 && !obstacle_triggered)
 159   1          {
 160   2            /* Enable buzzer before calling auto-close */
 161   2              Buzzer_Enable();
 162   2              OneKey_Close();          /* Initiate one-key close */
 163   2              Buzzer_Disable();
 164   2              obstacle_triggered = 1;  /* Ensure only triggered once */
 165   2          }
 166   1          if (miss_cnt >= 3)
 167   1          {
 168   2              obstacle_triggered = 0;  /* Ready for next trigger */
 169   2          }
 170   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    245    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      3    ----
C51 COMPILER V9.60.7.0   HCSR04                                                            06/07/2025 00:25:41 PAGE 4   

   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
