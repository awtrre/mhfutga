C51 COMPILER V9.60.7.0   MAIN                                                              06/07/2025 00:13:50 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Program Files\Keli C51\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(
                    -.\Listings\main.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          // main.c
   2          
   3          #include <reg52.h>
   4          #include "buttons.h"     /* For Buttons_Init(), ButtonX_Handle() */
   5          #include "onekey.h"      /* For OneKey_Open(), OneKey_Close(), OneKey_Task(), OneKey_IsMoving() */
   6          #include "motor.h"       /* For delay_ms() and stepper functions */
   7          #include "hcsr04.h"      /* For HCSR04_Init(), HCSR04_Task() */
   8          #include "eeprom.h"      /* For EEPROM_ReadByte() */
   9          #include "buzzer.h"     /* NEW: For Buzzer_Init(), etc. */
  10          
  11          
  12          long g_position_ms = 0;    /* Global motor position in ms */
  13          
  14          /**
  15           * @brief  Read the 32-bit saved position from EEPROM (0x2000..0x2003),
  16           *         combine into 'g_position_ms' (little-endian).
  17           */
  18          static void LoadPositionFromEEPROM(void)
  19          {
  20   1          unsigned char b0, b1, b2, b3;
  21   1          unsigned int base_addr = 0x2000;
  22   1      
  23   1          /* Read four bytes from EEPROM */
  24   1          b0 = EEPROM_ReadByte(base_addr);
  25   1          b1 = EEPROM_ReadByte(base_addr + 1);
  26   1          b2 = EEPROM_ReadByte(base_addr + 2);
  27   1          b3 = EEPROM_ReadByte(base_addr + 3);
  28   1      
  29   1          /* Combine into a signed 32-bit long (little-endian) */
  30   1          g_position_ms =  (long)b0
  31   1                         | ((long)b1 << 8)
  32   1                         | ((long)b2 << 16)
  33   1                         | ((long)b3 << 24);
  34   1      }
  35          
  36          void main(void)
  37          {
  38   1          /* 1) Initialize buttons (configure P3.0~P3.3 as inputs with pull-ups) */
  39   1          Buttons_Init();
  40   1      
  41   1          /* 2) Restore last saved motor position from EEPROM */
  42   1          LoadPositionFromEEPROM();
  43   1      
  44   1          /* 3) Initialize HC-SR04 ultrasonic sensor pins */
  45   1          HCSR04_Init();
  46   1        
  47   1          /* 4) Initialize buzzer pin */
  48   1          Buzzer_Init();   
  49   1        
  50   1          while (1)
  51   1          {
  52   2              /* --- Handle manual buttons (blocking in 700ms slices) --- */
  53   2              Button1_Handle();     /* Manual forward (P3.0) */
  54   2              Button2_Handle();     /* Manual reverse (P3.1) */
C51 COMPILER V9.60.7.0   MAIN                                                              06/07/2025 00:13:50 PAGE 2   

  55   2      
  56   2              /* --- Handle one-key OPEN / CLOSE (blocking until done or interrupted) --- */
  57   2              Button3_Handle();     /* One-key OPEN (P3.2) */
  58   2              Button4_Handle();     /* One-key CLOSE (P3.3) */
  59   2      
  60   2              /* 
  61   2               * --- HC-SR04 automatic obstacle check ---
  62   2               * Only call HCSR04_Task when motor is IDLE.
  63   2               */
  64   2              if (!OneKey_IsMoving())
  65   2              {
  66   3                  HCSR04_Task();
  67   3              }
  68   2      
  69   2              /* 
  70   2               * --- No need to call OneKey_Task() here, 
  71   2               *     because blocking OneKey_Open/Close do not require slices. --- 
  72   2               */
  73   2      
  74   2              /* --- Main loop tick: approx. 10 ms delay --- */
  75   2              delay_ms(10);
  76   2          }
  77   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    211    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      4       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
