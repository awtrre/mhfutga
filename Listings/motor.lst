C51 COMPILER V9.60.7.0   MOTOR                                                             06/05/2025 23:44:03 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MOTOR
OBJECT MODULE PLACED IN .\Objects\motor.obj
COMPILER INVOKED BY: D:\Program Files\Keli C51\C51\BIN\C51.EXE motor.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT
                    -(.\Listings\motor.lst) TABS(2) OBJECT(.\Objects\motor.obj)

line level    source

   1          // motor.c
   2          
   3          #include "motor.h"
   4          
   5          /**
   6           * @brief Delay for approximately ms milliseconds.
   7           *        This is a blocking, software-based delay.
   8           *
   9           * @param ms Number of milliseconds to delay
  10           */
  11          void delay_ms(unsigned int ms) {
  12   1          unsigned int i, j;
  13   1          for (i = ms; i > 0; i--) {
  14   2              for (j = 110; j > 0; j--);
  15   2          }
  16   1      }
  17          
  18          /**
  19           * @brief 8-step half-stepping sequence for a unipolar stepper motor.
  20           *        This array is shared by both forward and reverse functions.
  21           */
  22          static const unsigned char StepCode[8] = {
  23              0x01, 0x03, 0x02, 0x06,
  24              0x04, 0x0C, 0x08, 0x09
  25          };
  26          
  27          /**
  28           * @brief Keeps track of the current step index across multiple calls,
  29           *        so that consecutive calls continue smoothly from where they left off.
  30           */
  31          static unsigned char g_step_index = 0;
  32          
  33          /**
  34           * @brief Run the stepper motor forward for a specified duration in milliseconds.
  35           *        After the elapsed time, the motor remains energized at the last step.
  36           *
  37           * @param time_ms Duration in milliseconds (each step ~2ms, total_steps = time_ms / 2)
  38           */
  39          void StepMotor_RunMs(unsigned int time_ms) {
  40   1          unsigned long total_steps = ((unsigned long)time_ms) / 2UL;
  41   1          unsigned long i;
  42   1      
  43   1          for (i = 0; i < total_steps; i++) {
  44   2              MOTOR_PORT = StepCode[g_step_index];  // Output current step pattern
  45   2      
  46   2              g_step_index++;
  47   2              if (g_step_index >= 8) {
  48   3                  g_step_index = 0;  // Wrap around after 8 patterns
  49   3              }
  50   2      
  51   2              delay_ms(2);  // Wait ~2ms between steps
  52   2          }
  53   1          // Do NOT turn off MOTOR_PORT here; leave coils energized at last step.
  54   1      }
C51 COMPILER V9.60.7.0   MOTOR                                                             06/05/2025 23:44:03 PAGE 2   

  55          
  56          /**
  57           * @brief Run the stepper motor in reverse direction for a specified duration in milliseconds.
  58           *        After the elapsed time, the motor remains energized at the last step.
  59           *
  60           * @param time_ms Duration in milliseconds (each step ~2ms, total_steps = time_ms / 2)
  61           */
  62          void StepMotor_RunReverseMs(unsigned int time_ms) {
  63   1          unsigned long total_steps = ((unsigned long)time_ms) / 2UL;
  64   1          unsigned long i;
  65   1      
  66   1          for (i = 0; i < total_steps; i++) {
  67   2              MOTOR_PORT = StepCode[g_step_index];  // Output current step pattern
  68   2      
  69   2              if (g_step_index == 0) {
  70   3                  g_step_index = 7;
  71   3              } else {
  72   3                  g_step_index--;
  73   3              }
  74   2      
  75   2              delay_ms(2);  // Wait ~2ms between steps
  76   2          }
  77   1          // Do NOT turn off MOTOR_PORT here; leave coils energized at last step.
  78   1      }
  79          
  80          /**
  81           * @brief Immediately stop the stepper motor and de-energize all coils.
  82           */
  83          void StepMotor_Stop(void) {
  84   1          MOTOR_PORT = 0x00;  // Turn off all coils (stop motor)
  85   1          // Optionally reset g_step_index to 0 or leave as-is to resume smoothly next time.
  86   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    235    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      9      16
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
